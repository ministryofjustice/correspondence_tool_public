{
  "version": 3,
  "sources": ["../../../node_modules/govuk-frontend/src/govuk/common/index.mjs", "../../../node_modules/govuk-frontend/src/govuk/errors/index.mjs", "../../../node_modules/govuk-frontend/src/govuk/component.mjs", "../../../node_modules/govuk-frontend/src/govuk/common/configuration.mjs", "../../../node_modules/govuk-frontend/src/govuk/i18n.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/accordion/accordion.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/button/button.mjs", "../../../node_modules/govuk-frontend/src/govuk/common/closest-attribute-value.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/character-count/character-count.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/checkboxes/checkboxes.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/error-summary/error-summary.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/exit-this-page/exit-this-page.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/file-upload/file-upload.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/header/header.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/password-input/password-input.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/radios/radios.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/service-navigation/service-navigation.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/skip-link/skip-link.mjs", "../../../node_modules/govuk-frontend/src/govuk/components/tabs/tabs.mjs", "../../../node_modules/govuk-frontend/src/govuk/init.mjs", "../../javascript/moj.js", "../../javascript/modules/YesNoRadio.js", "../../javascript/modules/CharacterCount.js", "../../javascript/cookie_banner.js", "../../javascript/application.js"],
  "sourcesContent": ["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @internal\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @template {Partial<Record<keyof ObjectType, unknown>>} [ObjectType=ObjectNested]\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Format error message\n *\n * @internal\n * @param {ComponentWithModuleName} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef ComponentWithModuleName\n * @property {string} moduleName - Name of the component\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * @import { ObjectNested } from './configuration.mjs'\n */\n", "import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @virtual\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { component, identifier, element, expectedType } = messageOrOptions\n\n      message = identifier\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n\n      message = formatErrorMessage(component, message)\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends GOVUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @internal\n   * @param {ComponentWithModuleName | string} componentOrMessage - name of the component module\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            `Root element (\\`$root\\`) already initialised`\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n * @property {ComponentWithModuleName} component - Component throwing the error\n */\n\n/**\n * @import { ComponentWithModuleName } from '../common/index.mjs'\n */\n", "import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  // allows Typescript user to work around the lack of types\n  // in GOVUKFrontend package, Typescript is not aware of $root\n  // in components that extend GOVUKFrontendComponent\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {RootElementType} - the root element of component\n   */\n  get $root() {\n    return this._$root\n  }\n\n  /**\n   * @protected\n   * @type {RootElementType}\n   */\n  _$root\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ChildClassConstructor} */ (\n      this.constructor\n    )\n\n    // TypeScript does not enforce that inheriting classes will define a `moduleName`\n    // (even if we add a `@virtual` `static moduleName` property to this class).\n    // While we trust users to do this correctly, we do a little check to provide them\n    // a helpful error message.\n    //\n    // After this, we'll be sure that `childConstructor` has a `moduleName`\n    // as expected of the `ChildClassConstructor` we've cast `this.constructor` to.\n    if (typeof childConstructor.moduleName !== 'string') {\n      throw new InitError(`\\`moduleName\\` not defined in component`)\n    }\n\n    if (!($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    } else {\n      this._$root = /** @type {RootElementType} */ ($root)\n    }\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const moduleName = childConstructor.moduleName\n\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @private\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const constructor = /** @type {ChildClassConstructor} */ (this.constructor)\n    const moduleName = constructor.moduleName\n\n    if (moduleName && isInitialised(this.$root, moduleName)) {\n      throw new InitError(constructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n\n/**\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n */\n\n/**\n * @typedef {typeof Component & ChildClass} ChildClassConstructor\n */\n", "import { Component } from '../component.mjs'\nimport { ConfigError } from '../errors/index.mjs'\n\nimport { isObject, formatErrorMessage } from './index.mjs'\n\nexport const configOverride = Symbol.for('configOverride')\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {Element & { dataset: DOMStringMap }} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * configOverride\n   *\n   * Function which defines configuration overrides to prioritize\n   * properties from the root element's dataset.\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset. A Symbol\n   * is used for indexing to prevent conflicts.\n   *\n   * @internal\n   * @virtual\n   * @param {Partial<ConfigurationType>} [param] - Configuration object\n   * @returns {Partial<ConfigurationType>} return - Configuration object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [configOverride](param) {\n    return {}\n  }\n\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {ConfigurationType} - the root element of component\n   */\n  get config() {\n    return this._config\n  }\n\n  /**\n   *\n   * @type {ConfigurationType}\n   */\n  _config\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ChildClassConstructor<ConfigurationType>} */ (this.constructor)\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this._$root.dataset)\n    )\n\n    this._config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        childConstructor.defaults,\n        config ?? {},\n        this[configOverride](datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n}\n\n/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {{ schema?: Schema<ConfigurationType>, moduleName: string }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {ConfigurationType} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n * @property {Schema<ConfigurationType>} [schema] - The schema of the component configuration\n * @property {ConfigurationType} [defaults] - The default values of the configuration of the component\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef {typeof Component & ChildClass<ConfigurationType>} ChildClassConstructor<ConfigurationType>\n */\n", "/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && typeof translation === 'object') {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10–12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form – if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (typeof translation === 'object') {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n * @augments ConfigurableComponent<AccordionConfig>\n */\nexport class Accordion extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.i18n = new I18n(this.config.i18n)\n\n    const $sections = this.$root.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$root.insertBefore($accordionControls, this.$root.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          component: Accordion,\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$root.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.name !== 'id') {\n        $button.setAttribute(attr.name, attr.value)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    Array.from($span.childNodes).forEach(($child) =>\n      $headingTextFocus.appendChild($child)\n    )\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.name, attr.value)\n      }\n\n      // Copy original contents of summary to the new summary span\n      Array.from($summary.childNodes).forEach(($child) =>\n        $summarySpanFocus.appendChild($child)\n      )\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.remove()\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const nowExpanded = !this.isExpanded($section)\n    this.setExpanded(nowExpanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section, nowExpanded)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.areAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section, nowExpanded)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  areAllSectionsOpen() {\n    return Array.from(this.$sections).every(($section) =>\n      this.isExpanded($section)\n    )\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Get the identifier for a section\n   *\n   * We need a unique way of identifying each content in the Accordion.\n   * Since an `#id` should be unique and an `id` is required for `aria-`\n   * attributes `id` can be safely used.\n   *\n   * @param {Element} $section - Section element\n   * @returns {string | undefined | null} Identifier for section\n   */\n  getIdentifier($section) {\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n    return $button?.getAttribute('aria-controls')\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @param {boolean} isExpanded - Whether the section is expanded\n   */\n  storeState($section, isExpanded) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        window.sessionStorage.setItem(id, isExpanded.toString())\n      } catch (exception) {}\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        const state = window.sessionStorage.getItem(id)\n\n        if (state !== null) {\n          this.setExpanded(state === 'true', $section)\n        }\n      } catch (exception) {}\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.textContent = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n\n  /**\n   * Accordion config schema\n   *\n   * @constant\n   * @satisfies {Schema<AccordionConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      rememberExpanded: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  validateConfig,\n  ConfigurableComponent,\n  configOverride\n} from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength;\n\n  /**\n   * Character count config override\n   *\n   * To ensure data-attributes take complete precedence, even if they change\n   * the type of count, we need to reset the `maxlength` and `maxwords` from\n   * the JavaScript config.\n   *\n   * @internal\n   * @param {CharacterCountConfig} datasetConfig - configuration specified by dataset\n   * @returns {CharacterCountConfig} - configuration to override by dataset\n   */\n  [configOverride](datasetConfig) {\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * @param {Element | null} $root - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(formatErrorMessage(CharacterCount, errors[0]))\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Pre-existing validation error rendered from server\n    this.$errorMessage = this.$root.querySelector('.govuk-error-message')\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    if (!this.$errorMessage) {\n      // Only toggle the textarea error class if there isn't an error message\n      // already, as it may be unrelated to the limit (eg: allowed characters)\n      // and would set the border colour back to black.\n      this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    }\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n", "import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends Component {\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * – for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $root - HTML element to use for checkboxes\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-checkboxes__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n * @augments ConfigurableComponent<ExitThisPageConfig>\n */\nexport class ExitThisPage extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $root - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $button = this.$root.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        component: ExitThisPage,\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.i18n = new I18n(this.config.i18n)\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$root.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another key—so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (event.key === 'Shift' && !this.lastKeyWasModified) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n\n  /**\n   * Exit this page config schema\n   *\n   * @constant\n   * @satisfies {Schema<ExitThisPageConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * File upload component\n *\n * @preserve\n * @augments ConfigurableComponent<FileUploadConfig>\n */\nexport class FileUpload extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {HTMLFileInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   */\n  $button\n\n  /**\n   * @private\n   */\n  $status\n\n  /** @private */\n  i18n\n\n  /** @private */\n  id\n\n  /** @private */\n  $announcements\n\n  /**\n   * @private\n   * @type {boolean | undefined}\n   */\n  enteredAnotherElement\n\n  /**\n   * @param {Element | null} $root - File input element\n   * @param {FileUploadConfig} [config] - File Upload config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('input')\n\n    if ($input === null) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File inputs (`<input type=\"file\">`)'\n      })\n    }\n\n    if ($input.type !== 'file') {\n      throw new ElementError(\n        formatErrorMessage(\n          FileUpload,\n          'File input (`<input type=\"file\">`) attribute (`type`) is not `file`'\n        )\n      )\n    }\n\n    this.$input = /** @type {HTMLFileInputElement} */ ($input)\n    this.$input.setAttribute('hidden', 'true')\n\n    if (!this.$input.id) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File input (`<input type=\"file\">`) attribute (`id`)'\n      })\n    }\n\n    this.id = this.$input.id\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    const $label = this.findLabel()\n    // Add an ID to the label if it doesn't have one already\n    // so it can be referenced by `aria-labelledby`\n    if (!$label.id) {\n      $label.id = `${this.id}-label`\n    }\n\n    // we need to copy the 'id' of the root element\n    // to the new button replacement element\n    // so that focus will work in the error summary\n    this.$input.id = `${this.id}-input`\n\n    // Create the file selection button\n    const $button = document.createElement('button')\n    $button.classList.add('govuk-file-upload-button')\n    $button.type = 'button'\n    $button.id = this.id\n    $button.classList.add('govuk-file-upload-button--empty')\n\n    // Copy `aria-describedby` if present so hints and errors\n    // are associated to the `<button>`\n    const ariaDescribedBy = this.$input.getAttribute('aria-describedby')\n    if (ariaDescribedBy) {\n      $button.setAttribute('aria-describedby', ariaDescribedBy)\n    }\n\n    // Create status element that shows what/how many files are selected\n    const $status = document.createElement('span')\n    $status.className = 'govuk-body govuk-file-upload-button__status'\n    $status.setAttribute('aria-live', 'polite')\n    $status.innerText = this.i18n.t('noFileChosen')\n\n    $button.appendChild($status)\n\n    const commaSpan = document.createElement('span')\n    commaSpan.className = 'govuk-visually-hidden'\n    commaSpan.innerText = ', '\n    commaSpan.id = `${this.id}-comma`\n\n    $button.appendChild(commaSpan)\n\n    const containerSpan = document.createElement('span')\n    containerSpan.className =\n      'govuk-file-upload-button__pseudo-button-container'\n\n    const buttonSpan = document.createElement('span')\n    buttonSpan.className =\n      'govuk-button govuk-button--secondary govuk-file-upload-button__pseudo-button'\n    buttonSpan.innerText = this.i18n.t('chooseFilesButton')\n\n    containerSpan.appendChild(buttonSpan)\n\n    // Add a space so the button and instruction read correctly\n    // when CSS is disabled\n    containerSpan.insertAdjacentText('beforeend', ' ')\n\n    const instructionSpan = document.createElement('span')\n    instructionSpan.className =\n      'govuk-body govuk-file-upload-button__instruction'\n    instructionSpan.innerText = this.i18n.t('dropInstruction')\n\n    containerSpan.appendChild(instructionSpan)\n\n    $button.appendChild(containerSpan)\n    $button.setAttribute(\n      'aria-labelledby',\n      `${$label.id} ${commaSpan.id} ${$button.id}`\n    )\n    $button.addEventListener('click', this.onClick.bind(this))\n    $button.addEventListener('dragover', (event) => {\n      // prevent default to allow drop\n      event.preventDefault()\n    })\n\n    // Assemble these all together\n    this.$root.insertAdjacentElement('afterbegin', $button)\n\n    this.$input.setAttribute('tabindex', '-1')\n    this.$input.setAttribute('aria-hidden', 'true')\n\n    // Make all these new variables available to the module\n    this.$button = $button\n    this.$status = $status\n\n    // Bind change event to the underlying input\n    this.$input.addEventListener('change', this.onChange.bind(this))\n\n    // Synchronise the `disabled` state between the button and underlying input\n    this.updateDisabledState()\n    this.observeDisabledState()\n\n    // Handle drop zone visibility\n    // A live region to announce when users enter or leave the drop zone\n    this.$announcements = document.createElement('span')\n    this.$announcements.classList.add('govuk-file-upload-announcements')\n    this.$announcements.classList.add('govuk-visually-hidden')\n    this.$announcements.setAttribute('aria-live', 'assertive')\n    this.$root.insertAdjacentElement('afterend', this.$announcements)\n\n    // if there is no CSS and input is hidden\n    // button will need to handle drop event\n    this.$button.addEventListener('drop', this.onDrop.bind(this))\n\n    // While user is dragging, it gets a little more complex because of Safari.\n    // Safari doesn't fill `relatedTarget` on `dragleave` (nor `dragenter`).\n    // This means we can't use `relatedTarget` to:\n    // - check if the user is still within the wrapper\n    //   (`relatedTarget` being a descendant of the wrapper)\n    // - check if the user is still over the viewport\n    //   (`relatedTarget` being null if outside)\n\n    // Thanks to `dragenter` bubbling, we can listen on the `document` with a\n    // single function and update the visibility based on whether we entered a\n    // node inside or outside the wrapper.\n    document.addEventListener(\n      'dragenter',\n      this.updateDropzoneVisibility.bind(this)\n    )\n\n    // To detect if we're outside the document, we can track if there was a\n    // `dragenter` event preceding a `dragleave`. If there wasn't, this means\n    // we're outside the document.\n    //\n    // The order of events is guaranteed by the HTML specs:\n    // https://html.spec.whatwg.org/multipage/dnd.html#drag-and-drop-processing-model\n    document.addEventListener('dragenter', () => {\n      this.enteredAnotherElement = true\n    })\n\n    document.addEventListener('dragleave', () => {\n      if (!this.enteredAnotherElement && !this.$button.disabled) {\n        this.hideDraggingState()\n        this.$announcements.innerText = this.i18n.t('leftDropZone')\n      }\n\n      this.enteredAnotherElement = false\n    })\n  }\n\n  /**\n   * Updates the visibility of the dropzone as users enters the various elements on the page\n   *\n   * @private\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  updateDropzoneVisibility(event) {\n    if (this.$button.disabled) return\n\n    // DOM interfaces only type `event.target` as `EventTarget`\n    // so we first need to make sure it's a `Node`\n    if (event.target instanceof Node) {\n      if (this.$root.contains(event.target)) {\n        if (event.dataTransfer && isContainingFiles(event.dataTransfer)) {\n          // Only update the class and make the announcement if not already visible\n          // to avoid repeated announcements on NVDA (2024.4) + Firefox (133)\n          if (\n            !this.$button.classList.contains(\n              'govuk-file-upload-button--dragging'\n            )\n          ) {\n            this.showDraggingState()\n            this.$announcements.innerText = this.i18n.t('enteredDropZone')\n          }\n        }\n      } else {\n        // Only hide the dropzone if it is visible to prevent announcing user\n        // left the drop zone when they enter the page but haven't reached yet\n        // the file upload component\n        if (\n          this.$button.classList.contains('govuk-file-upload-button--dragging')\n        ) {\n          this.hideDraggingState()\n          this.$announcements.innerText = this.i18n.t('leftDropZone')\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the drop zone visually\n   *\n   * @private\n   */\n  showDraggingState() {\n    this.$button.classList.add('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Hides the drop zone visually\n   *\n   * @private\n   */\n  hideDraggingState() {\n    this.$button.classList.remove('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Handles user dropping on the component\n   *\n   * @private\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  onDrop(event) {\n    event.preventDefault()\n\n    if (event.dataTransfer && isContainingFiles(event.dataTransfer)) {\n      this.$input.files = event.dataTransfer.files\n\n      // Dispatch a `change` event so external code that would rely on the `<input>`\n      // dispatching an event when files are dropped still work.\n      // Use a `CustomEvent` so our events are distinguishable from browser's native events\n      this.$input.dispatchEvent(new CustomEvent('change'))\n\n      this.hideDraggingState()\n    }\n  }\n\n  /**\n   * Check if the value of the underlying input has changed\n   *\n   * @private\n   */\n  onChange() {\n    const fileCount = this.$input.files.length\n\n    if (fileCount === 0) {\n      // If there are no files, show the default selection text\n      this.$status.innerText = this.i18n.t('noFileChosen')\n      this.$button.classList.add('govuk-file-upload-button--empty')\n    } else {\n      if (\n        // If there is 1 file, just show the file name\n        fileCount === 1\n      ) {\n        this.$status.innerText = this.$input.files[0].name\n      } else {\n        // Otherwise, tell the user how many files are selected\n        this.$status.innerText = this.i18n.t('multipleFilesChosen', {\n          count: fileCount\n        })\n      }\n\n      this.$button.classList.remove('govuk-file-upload-button--empty')\n    }\n  }\n\n  /**\n   * Looks up the `<label>` element associated to the field\n   *\n   * @private\n   * @returns {HTMLElement} The `<label>` element associated to the field\n   * @throws {ElementError} If the `<label>` cannot be found\n   */\n  findLabel() {\n    // Use `label` in the selector so TypeScript knows the type fo `HTMLElement`\n    const $label = document.querySelector(`label[for=\"${this.$input.id}\"]`)\n\n    if (!$label) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: `Field label (\\`<label for=${this.$input.id}>\\`)`\n      })\n    }\n\n    return $label\n  }\n\n  /**\n   * When the button is clicked, emulate clicking the actual, hidden file input\n   *\n   * @private\n   */\n  onClick() {\n    this.$input.click()\n  }\n\n  /**\n   * Create a mutation observer to check if the input's attributes altered.\n   *\n   * @private\n   */\n  observeDisabledState() {\n    const observer = new MutationObserver((mutationList) => {\n      for (const mutation of mutationList) {\n        if (\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'disabled'\n        ) {\n          this.updateDisabledState()\n        }\n      }\n    })\n\n    observer.observe(this.$input, {\n      attributes: true\n    })\n  }\n\n  /**\n   * Synchronise the `disabled` state between the input and replacement button.\n   *\n   * @private\n   */\n  updateDisabledState() {\n    this.$button.disabled = this.$input.disabled\n\n    this.$root.classList.toggle(\n      'govuk-drop-zone--disabled',\n      this.$button.disabled\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-file-upload'\n\n  /**\n   * File upload default config\n   *\n   * @see {@link FileUploadConfig}\n   * @constant\n   * @type {FileUploadConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      chooseFilesButton: 'Choose file',\n      dropInstruction: 'or drop file',\n      noFileChosen: 'No file chosen',\n      multipleFilesChosen: {\n        // the 'one' string isn't used as the component displays the filename\n        // instead, however it's here for coverage's sake\n        one: '%{count} file chosen',\n        other: '%{count} files chosen'\n      },\n      enteredDropZone: 'Entered drop zone',\n      leftDropZone: 'Left drop zone'\n    }\n  })\n\n  /**\n   * File upload config schema\n   *\n   * @constant\n   * @satisfies {Schema<FileUploadConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Checks if the given `DataTransfer` contains files\n *\n * @internal\n * @param {DataTransfer} dataTransfer - The `DataTransfer` to check\n * @returns {boolean} - `true` if it contains files or we can't infer it, `false` otherwise\n */\nfunction isContainingFiles(dataTransfer) {\n  // Safari sometimes does not provide info about types :'(\n  // In which case best not to assume anything and try to set the files\n  const hasNoTypesInfo = dataTransfer.types.length === 0\n\n  // When dragging images, there's a mix of mime types + Files\n  // which we can't assign to the native input\n  const isDraggingFiles = dataTransfer.types.some((type) => type === 'Files')\n\n  return hasNoTypesInfo || isDraggingFiles\n}\n\n/**\n * @typedef {HTMLInputElement & {files: FileList}} HTMLFileInputElement\n */\n\n/**\n * File upload config\n *\n * @see {@link FileUpload.defaults}\n * @typedef {object} FileUploadConfig\n * @property {FileUploadTranslations} [i18n=FileUpload.defaults.i18n] - File upload translations\n */\n\n/**\n * File upload translations\n *\n * @see {@link FileUpload.defaults.i18n}\n * @typedef {object} FileUploadTranslations\n *\n * Messages used by the component\n * @property {string} [chooseFile] - The text of the button that opens the file picker\n * @property {string} [dropInstruction] - The text informing users they can drop files\n * @property {TranslationPluralForms} [multipleFilesChosen] - The text displayed when multiple files\n *   have been chosen by the user\n * @property {string} [noFileChosen] - The text to displayed when no file has been chosen by the user\n * @property {string} [enteredDropZone] - The text announced by assistive technology\n *   when user drags files and enters the drop zone\n * @property {string} [leftDropZone] - The text announced by assistive technology\n *   when user drags files and leaves the drop zone without dropping\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n", "import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends Component {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    // Pad the header logo so it doesn't overlap the menu button\n    this.$root.classList.add('govuk-header--with-js-navigation')\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: Header,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: Header,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Header,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n", "import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { setFocus } from '../../common/index.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` – in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n * @augments ConfigurableComponent<PasswordInputConfig>\n */\nexport class PasswordInput extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /**\n   * @private\n   * @type {HTMLInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  $showHideButton\n\n  /** @private */\n  $screenReaderStatusMessage\n\n  /**\n   * @param {Element | null} $root - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('.govuk-js-password-input-input')\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-password-input-input`)'\n      })\n    }\n\n    if ($input.type !== 'password') {\n      throw new ElementError(\n        'Password input: Form field (`.govuk-js-password-input-input`) must be of type `password`.'\n      )\n    }\n\n    const $showHideButton = this.$root.querySelector(\n      '.govuk-js-password-input-toggle'\n    )\n    if (!($showHideButton instanceof HTMLButtonElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $showHideButton,\n        expectedType: 'HTMLButtonElement',\n        identifier: 'Button (`.govuk-js-password-input-toggle`)'\n      })\n    }\n\n    if ($showHideButton.type !== 'button') {\n      throw new ElementError(\n        'Password input: Button (`.govuk-js-password-input-toggle`) must be of type `button`.'\n      )\n    }\n\n    this.$input = $input\n    this.$showHideButton = $showHideButton\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Show the toggle button element\n    this.$showHideButton.removeAttribute('hidden')\n\n    // Create and append the status text for screen readers.\n    // This is injected between the input and button so that users get a sensible reading order if\n    // moving through the page content linearly:\n    // [password input] -> [your password is visible/hidden] -> [show/hide password]\n    const $screenReaderStatusMessage = document.createElement('div')\n    $screenReaderStatusMessage.className =\n      'govuk-password-input__sr-status govuk-visually-hidden'\n    $screenReaderStatusMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderStatusMessage = $screenReaderStatusMessage\n    this.$input.insertAdjacentElement('afterend', $screenReaderStatusMessage)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener('click', this.toggle.bind(this))\n\n    // Bind event to revert the password visibility to hidden\n    if (this.$input.form) {\n      this.$input.form.addEventListener('submit', () => this.hide())\n    }\n\n    // If the page is restored from bfcache and the password is visible, hide it again\n    window.addEventListener('pageshow', (event) => {\n      if (event.persisted && this.$input.type !== 'password') {\n        this.hide()\n      }\n    })\n\n    // Default the component to having the password hidden.\n    this.hide()\n  }\n\n  /**\n   * Toggle the visibility of the password input\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  toggle(event) {\n    event.preventDefault()\n\n    // If on this click, the field is type=\"password\", show the value\n    if (this.$input.type === 'password') {\n      this.show()\n      return\n    }\n\n    // Otherwise, hide it\n    // Being defensive - hiding should always be the default\n    this.hide()\n  }\n\n  /**\n   * Show the password input value in plain text.\n   *\n   * @private\n   */\n  show() {\n    this.setType('text')\n  }\n\n  /**\n   * Hide the password input value.\n   *\n   * @private\n   */\n  hide() {\n    this.setType('password')\n  }\n\n  /**\n   * Set the password input type\n   *\n   * @param {'text' | 'password'} type - Input type\n   * @private\n   */\n  setType(type) {\n    if (type === this.$input.type) {\n      return\n    }\n\n    // Update input type\n    this.$input.setAttribute('type', type)\n\n    const isHidden = type === 'password'\n    const prefixButton = isHidden ? 'show' : 'hide'\n    const prefixStatus = isHidden ? 'passwordHidden' : 'passwordShown'\n\n    // Update button text\n    this.$showHideButton.innerText = this.i18n.t(`${prefixButton}Password`)\n\n    // Update button aria-label\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t(`${prefixButton}PasswordAriaLabel`)\n    )\n\n    // Update status change text\n    this.$screenReaderStatusMessage.innerText = this.i18n.t(\n      `${prefixStatus}Announcement`\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Password input config schema\n   *\n   * @constant\n   * @satisfies {Schema<PasswordInputConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. Plain text only.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. Plain text only.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n", "import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends Component {\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block –\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $root - HTML element to use for radios\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio under the root of another Radio component)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n", "import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Service Navigation component\n *\n * @preserve\n */\nexport class ServiceNavigation extends Component {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Remember the open/closed state of the nav so we can maintain it when the\n   * screen is resized.\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector(\n      '.govuk-js-service-navigation-toggle'\n    )\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-service-navigation-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-service-navigation'\n}\n", "import { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for skip link\n   * @throws {ElementError} when $root is not set or the wrong type\n   * @throws {ElementError} when $root.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    /** @type {URL | undefined} */\n    let url\n\n    /**\n     * Check for valid link URL\n     *\n     * {@link https://caniuse.com/url}\n     * {@link https://url.spec.whatwg.org}\n     *\n     */\n    try {\n      url = new window.URL(this.$root.href)\n    } catch (error) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) is invalid`\n      )\n    }\n\n    // Return early for external URLs or links to other pages\n    if (\n      url.origin !== window.location.origin ||\n      url.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = getFragmentFromUrl(hash)\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n", "import { getBreakpoint, getFragmentFromUrl } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends Component {\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for tabs\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right arrow for next tab\n   * - Press left arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left' and 'Right' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'Left':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'Right':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n", "import { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { FileUpload } from './components/file-upload/file-upload.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { PasswordInput } from './components/password-input/password-input.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { ServiceNavigation } from './components/service-navigation/service-navigation.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element, onError?: OnErrorCallback<CompatibleClass> }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    if (config.onError) {\n      config.onError(new SupportError(), {\n        config\n      })\n    } else {\n      console.log(new SupportError())\n    }\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [FileUpload, config.fileUpload],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [PasswordInput, config.passwordInput],\n    [Radios],\n    [ServiceNavigation],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  // const $scope = config.scope ?? document\n\n  const options = {\n    scope: config.scope ?? document,\n    onError: config.onError\n  }\n\n  components.forEach(([Component, config]) => {\n    createAll(Component, config, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass} ComponentClass\n * @param {ComponentClass} Component - class of the component to create\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass> | Element | Document | CreateAllOptions<ComponentClass> } [createAllOptions] - options for createAll including scope of the document to search within and callback function if error throw by component on init\n * @returns {Array<InstanceType<ComponentClass>>} - array of instantiated components\n */\nfunction createAll(Component, config, createAllOptions) {\n  let /** @type {Element | Document} */ $scope = document\n  let /** @type {OnErrorCallback<Component> | undefined} */ onError\n\n  if (typeof createAllOptions === 'object') {\n    createAllOptions = /** @type {CreateAllOptions<Component>} */ (\n      // eslint-disable-next-line no-self-assign\n      createAllOptions\n    )\n\n    $scope = createAllOptions.scope ?? $scope\n    onError = createAllOptions.onError\n  }\n\n  if (typeof createAllOptions === 'function') {\n    onError = createAllOptions\n  }\n\n  if (createAllOptions instanceof HTMLElement) {\n    $scope = createAllOptions\n  }\n\n  const $elements = $scope.querySelectorAll(\n    `[data-module=\"${Component.moduleName}\"]`\n  )\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    if (onError) {\n      onError(new SupportError(), {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(new SupportError())\n    }\n    return []\n  }\n\n  /* eslint-disable-next-line @typescript-eslint/no-unsafe-return --\n   * We can't define CompatibleClass as `{new(): CompatibleClass, moduleName: string}`,\n   * as when doing `typeof Accordion` (or any component), TypeScript doesn't seem\n   * to acknowledge the static `moduleName` that's set in our component classes.\n   * This means we have to set the constructor of `CompatibleClass` as `{new(): any}`,\n   * leading to ESLint frowning that we're returning `any[]`.\n   */\n  return Array.from($elements)\n    .map(($element) => {\n      try {\n        // Only pass config to components that accept it\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return typeof config !== 'undefined'\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        if (onError) {\n          onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter(Boolean) // Exclude components that errored\n}\n\nexport { initAll, createAll }\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef {{new (...args: any[]): any, moduleName: string}} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {FileUploadConfig} [fileUpload] - File Upload config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n * @property {PasswordInputConfig} [passwordInput] - Password input config\n */\n\n/**\n * Config for individual components\n *\n * @import { AccordionConfig } from './components/accordion/accordion.mjs'\n * @import { ButtonConfig } from './components/button/button.mjs'\n * @import { CharacterCountConfig } from './components/character-count/character-count.mjs'\n * @import { ErrorSummaryConfig } from './components/error-summary/error-summary.mjs'\n * @import { ExitThisPageConfig } from './components/exit-this-page/exit-this-page.mjs'\n * @import { NotificationBannerConfig } from './components/notification-banner/notification-banner.mjs'\n * @import { PasswordInputConfig } from './components/password-input/password-input.mjs'\n * @import { FileUploadConfig } from './components/file-upload/file-upload.mjs'\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {ComponentConfig<ComponentClass>} config - Config supplied to component\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document} [scope] - scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - callback function if error throw by component on init\n */\n", "(function(){\n  'use strict';\n\n  var moj = {\n    Modules: {},\n\n    init: function () {\n      for (var x in moj.Modules) {\n        if (typeof moj.Modules[x].init === 'function') {\n          moj.Modules[x].init();\n        }\n      }\n    },\n\n    // safe logging\n    log: function (msg) {\n      if (window && window.console) {\n        window.console.log(msg);\n      }\n    },\n    dir: function (obj) {\n      if (window && window.console) {\n        window.console.dir(obj);\n      }\n    }\n\n  };\n\n  window.moj = moj;\n}());\n", "moj.Modules.YesNoRadio = {\n  $yesContent: document.getElementById('correspondence_contact_requested_yes_content'),\n  $noContent: document.getElementById('correspondence_contact_requested_no_content'),\n\n  init: function() {\n    const $yes = document.getElementById('correspondence-contact-requested-yes-field');\n    const $no = document.getElementById('correspondence-contact-requested-no-field');\n\n    if ($yes) {\n      $yes.addEventListener(\"click\", this.showYesContent.bind(this))\n      if($yes.checked) this.showYesContent();\n    }\n\n    if ($no) {\n      $no.addEventListener(\"click\", this.showNoContent.bind(this))\n      if($no.checked) this.showNoContent();\n    }\n  },\n\n  showYesContent: function() {\n    this.$yesContent.classList.remove('js-hidden');\n    this.$noContent.classList.add('js-hidden');\n  },\n\n  showNoContent: function() {\n    this.$yesContent.classList.add('js-hidden');\n    this.$noContent.classList.remove('js-hidden');\n  }\n};\n", "var charCount = document.getElementsByClassName('char-counter')[0];\nif (charCount) {\n  moj.Modules.CharacterCount = {\n    $message: document.getElementById('correspondence-message-field') || document.getElementById('correspondence-message-field-error'),\n    $liveRegion: document.getElementById('live-region-text'),\n    maxChars: Number(charCount.dataset['maxlength']),\n\n    init : function() {\n      this.$message.addEventListener(\"keydown\", this.countCharacters.bind(this));\n      this.$message.addEventListener(\"keyup\", this.countCharacters.bind(this));\n      this.$message.dispatchEvent(new Event(\"keydown\"));\n    },\n\n    countCharacters: function() {\n      var text = this.$message.value;\n      var realLength = text.length;\n      var remaining = this.maxChars - realLength;\n\n      if (remaining < 0) {\n        this.$message.classList.add('char-counter--overlimit');\n        this.$liveRegion.classList.add('char-counter--overlimit');\n        this.$liveRegion.ariaLive = \"assertive\"\n        this.$liveRegion.ariaAtomic = \"true\"\n        this.updateRemaining(remaining);\n\n      } else {\n        this.$message.classList.remove('char-counter--overlimit');\n        this.$liveRegion.classList.remove('char-counter--overlimit');\n        this.$liveRegion.ariaLive = \"polite\"\n        this.$liveRegion.ariaAtomic = \"false\"\n        this.updateRemaining(remaining);\n      }\n    },\n\n    updateRemaining : function (charsLeft) {\n      this.$liveRegion.getElementsByClassName('char-counter-count')[0].textContent = charsLeft;\n    }\n  }\n};\n", "// Hide cookie banner\nvar cookieBanner = document.querySelector(\".govuk-cookie-banner\");\nif (cookieBanner) {\n  var hideButton = cookieBanner.querySelector('.cookie-hide-button');\n\n  if (hideButton) {\n    hideButton.addEventListener(\"click\", function(e) {\n      e.preventDefault();\n      cookieBanner.style.display = 'none';\n    });\n  }\n}\n", "import { initAll } from \"govuk-frontend\";\nimport \"./moj\"\nimport \"./modules/YesNoRadio\";\nimport \"./modules/CharacterCount\";\nimport \"./cookie_banner\"\n\ninitAll();\nmoj.init();\n"],
  "mappings": "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",
  "names": ["getFragmentFromUrl", "url", "includes", "undefined", "split", "pop", "getBreakpoint", "name", "property", "value", "window", "getComputedStyle", "document", "documentElement", "getPropertyValue", "setFocus", "$element", "options", "_options$onBeforeFocu", "isFocusable", "getAttribute", "setAttribute", "onFocus", "addEventListener", "onBlur", "once", "_options$onBlur", "call", "removeAttribute", "onBeforeFocus", "focus", "isInitialised", "$root", "moduleName", "HTMLElement", "hasAttribute", "isSupported", "$scope", "body", "classList", "contains", "isArray", "option", "Array", "isObject", "formatErrorMessage", "Component", "message", "GOVUKFrontendError", "Error", "constructor", "args", "name", "SupportError", "$scope", "document", "body", "supportMessage", "HTMLScriptElement", "prototype", "ConfigError", "ElementError", "messageOrOptions", "message", "component", "identifier", "element", "expectedType", "formatErrorMessage", "InitError", "componentOrMessage", "Component", "$root", "_$root", "constructor", "childConstructor", "moduleName", "InitError", "elementType", "ElementError", "element", "component", "identifier", "expectedType", "name", "checkSupport", "checkInitialised", "setAttribute", "isInitialised", "isSupported", "SupportError", "HTMLElement", "configOverride", "Symbol", "for", "ConfigurableComponent", "Component", "param", "config", "_config", "constructor", "$root", "childConstructor", "isObject", "defaults", "ConfigError", "formatErrorMessage", "datasetConfig", "normaliseDataset", "_$root", "dataset", "mergeConfigs", "normaliseString", "value", "property", "trimmedValue", "trim", "output", "outputType", "type", "includes", "length", "isFinite", "Number", "schema", "out", "entries", "Object", "properties", "entry", "namespace", "field", "toString", "extractConfigByNamespace", "configObjects", "formattedConfigObject", "configObject", "key", "keys", "option", "override", "validateConfig", "validationErrors", "name", "conditions", "errors", "Array", "isArray", "required", "errorMessage", "every", "push", "newObject", "current", "keyParts", "split", "index", "I18n", "constructor", "translations", "config", "_config$locale", "locale", "document", "documentElement", "lang", "t", "lookupKey", "options", "Error", "translation", "count", "translationPluralForm", "getPluralSuffix", "match", "replacePlaceholders", "translationString", "formatter", "Intl", "NumberFormat", "supportedLocalesOf", "length", "undefined", "replace", "placeholderWithBraces", "placeholderKey", "Object", "prototype", "hasOwnProperty", "call", "placeholderValue", "format", "hasIntlPluralRulesSupport", "Boolean", "window", "PluralRules", "Number", "isFinite", "preferredForm", "select", "selectPluralFormUsingFallbackRules", "console", "warn", "Math", "abs", "floor", "ruleset", "getPluralRulesForLocale", "pluralRules", "localeShort", "split", "pluralRule", "pluralRulesMap", "languages", "includes", "arabic", "chinese", "french", "german", "irish", "russian", "scottish", "spanish", "welsh", "n", "lastTwo", "last", "Accordion", "ConfigurableComponent", "constructor", "$root", "config", "i18n", "controlsClass", "showAllClass", "showAllTextClass", "sectionClass", "sectionExpandedClass", "sectionButtonClass", "sectionHeaderClass", "sectionHeadingClass", "sectionHeadingDividerClass", "sectionHeadingTextClass", "sectionHeadingTextFocusClass", "sectionShowHideToggleClass", "sectionShowHideToggleFocusClass", "sectionShowHideTextClass", "upChevronIconClass", "downChevronIconClass", "sectionSummaryClass", "sectionSummaryFocusClass", "sectionContentClass", "$sections", "$showAllButton", "$showAllIcon", "$showAllText", "I18n", "querySelectorAll", "length", "ElementError", "component", "identifier", "initControls", "initSectionHeaders", "updateShowAllButton", "areAllSectionsOpen", "document", "createElement", "setAttribute", "classList", "add", "appendChild", "$accordionControls", "insertBefore", "firstChild", "addEventListener", "onShowOrHideAllToggle", "event", "onBeforeMatch", "forEach", "$section", "i", "$header", "querySelector", "constructHeaderMarkup", "setExpanded", "isExpanded", "onSectionToggle", "setInitialState", "index", "$span", "$heading", "$summary", "$button", "id", "attr", "Array", "from", "attributes", "name", "value", "$headingText", "$headingTextFocus", "childNodes", "$child", "$showHideToggle", "$showHideToggleFocus", "$showHideText", "$showHideIcon", "getButtonPunctuationEl", "$summarySpan", "$summarySpanFocus", "remove", "removeChild", "$fragment", "target", "Element", "closest", "nowExpanded", "storeState", "expanded", "$content", "newButtonText", "t", "textContent", "ariaLabelParts", "push", "trim", "ariaLabelMessage", "join", "removeAttribute", "contains", "every", "toString", "toggle", "getIdentifier", "getAttribute", "rememberExpanded", "window", "sessionStorage", "setItem", "exception", "state", "getItem", "$punctuationEl", "moduleName", "defaults", "Object", "freeze", "hideAllSections", "hideSection", "hideSectionAriaLabel", "showAllSections", "showSection", "showSectionAriaLabel", "schema", "properties", "type", "DEBOUNCE_TIMEOUT_IN_SECONDS", "Button", "ConfigurableComponent", "constructor", "$root", "config", "debounceFormSubmitTimer", "addEventListener", "event", "handleKeyDown", "debounce", "$target", "target", "key", "HTMLElement", "getAttribute", "preventDefault", "click", "preventDoubleClick", "window", "setTimeout", "moduleName", "defaults", "Object", "freeze", "schema", "properties", "type", "closestAttributeValue", "$element", "attributeName", "$closestElementWithAttribute", "closest", "getAttribute", "CharacterCount", "ConfigurableComponent", "configOverride", "datasetConfig", "configOverrides", "maxlength", "undefined", "maxwords", "constructor", "$root", "config", "_ref", "_this$config$maxwords", "$textarea", "$visibleCountMessage", "$screenReaderCountMessage", "lastInputTimestamp", "lastInputValue", "valueChecker", "i18n", "maxLength", "querySelector", "HTMLTextAreaElement", "HTMLInputElement", "ElementError", "component", "element", "expectedType", "identifier", "errors", "validateConfig", "schema", "ConfigError", "formatErrorMessage", "I18n", "locale", "closestAttributeValue", "Infinity", "textareaDescriptionId", "id", "$textareaDescription", "document", "getElementById", "$errorMessage", "textContent", "match", "t", "count", "insertAdjacentElement", "createElement", "className", "setAttribute", "classList", "add", "removeAttribute", "bindChangeEvents", "window", "addEventListener", "updateCountMessage", "handleKeyUp", "handleFocus", "handleBlur", "updateVisibleCountMessage", "Date", "now", "setInterval", "updateIfValueChanged", "clearInterval", "value", "updateScreenReaderCountMessage", "remainingNumber", "isError", "toggle", "isOverThreshold", "getCountMessage", "text", "_text$match", "tokens", "length", "countType", "formatCountMessage", "translationKeySuffix", "Math", "abs", "threshold", "currentLength", "thresholdValue", "moduleName", "defaults", "Object", "freeze", "charactersUnderLimit", "one", "other", "charactersAtLimit", "charactersOverLimit", "wordsUnderLimit", "wordsAtLimit", "wordsOverLimit", "textareaDescription", "properties", "type", "anyOf", "required", "errorMessage", "Checkboxes", "Component", "constructor", "$root", "$inputs", "querySelectorAll", "length", "ElementError", "component", "identifier", "forEach", "$input", "targetId", "getAttribute", "document", "getElementById", "setAttribute", "removeAttribute", "window", "addEventListener", "syncAllConditionalReveals", "event", "handleClick", "syncConditionalRevealWithInputState", "$target", "classList", "contains", "inputIsChecked", "checked", "toString", "toggle", "unCheckAllInputsExcept", "allInputsWithSameName", "name", "$inputWithSameName", "hasSameFormOwner", "form", "unCheckExclusiveInputs", "allInputsWithSameNameAndExclusiveBehaviour", "$exclusiveInput", "$clickedInput", "target", "HTMLInputElement", "type", "hasAriaControls", "hasBehaviourExclusive", "moduleName", "ErrorSummary", "ConfigurableComponent", "constructor", "$root", "config", "disableAutoFocus", "setFocus", "addEventListener", "event", "handleClick", "$target", "target", "focusTarget", "preventDefault", "HTMLAnchorElement", "inputId", "getFragmentFromUrl", "href", "$input", "document", "getElementById", "$legendOrLabel", "getAssociatedLegendOrLabel", "scrollIntoView", "focus", "preventScroll", "_document$querySelect", "$fieldset", "closest", "$legends", "getElementsByTagName", "length", "$candidateLegend", "HTMLInputElement", "type", "legendTop", "getBoundingClientRect", "top", "inputRect", "height", "window", "innerHeight", "inputBottom", "querySelector", "getAttribute", "moduleName", "defaults", "Object", "freeze", "schema", "properties", "ExitThisPage", "ConfigurableComponent", "constructor", "$root", "config", "i18n", "$button", "$skiplinkButton", "$updateSpan", "$indicatorContainer", "$overlay", "keypressCounter", "lastKeyWasModified", "timeoutTime", "keypressTimeoutId", "timeoutMessageId", "querySelector", "HTMLAnchorElement", "ElementError", "component", "element", "expectedType", "identifier", "I18n", "document", "buildIndicator", "initUpdateSpan", "initButtonClickHandler", "body", "dataset", "addEventListener", "handleKeypress", "bind", "govukFrontendExitThisPageKeypress", "window", "resetPage", "createElement", "setAttribute", "className", "appendChild", "handleClick", "i", "$indicator", "updateIndicator", "classList", "toggle", "$indicators", "querySelectorAll", "forEach", "index", "exitPage", "textContent", "add", "t", "location", "href", "event", "preventDefault", "key", "clearTimeout", "setKeypressTimer", "resetKeypressTimer", "shiftKey", "setTimeout", "remove", "moduleName", "defaults", "Object", "freeze", "activated", "timedOut", "pressTwoMoreTimes", "pressOneMoreTime", "schema", "properties", "type", "FileUpload", "ConfigurableComponent", "constructor", "$root", "config", "$input", "$button", "$status", "i18n", "id", "$announcements", "enteredAnotherElement", "querySelector", "ElementError", "component", "identifier", "type", "formatErrorMessage", "setAttribute", "I18n", "locale", "closestAttributeValue", "$label", "findLabel", "document", "createElement", "classList", "add", "ariaDescribedBy", "getAttribute", "className", "innerText", "t", "appendChild", "commaSpan", "containerSpan", "buttonSpan", "insertAdjacentText", "instructionSpan", "addEventListener", "onClick", "bind", "event", "preventDefault", "insertAdjacentElement", "onChange", "updateDisabledState", "observeDisabledState", "onDrop", "updateDropzoneVisibility", "disabled", "hideDraggingState", "target", "Node", "contains", "dataTransfer", "isContainingFiles", "showDraggingState", "remove", "files", "dispatchEvent", "CustomEvent", "fileCount", "length", "name", "count", "click", "observer", "MutationObserver", "mutationList", "mutation", "attributeName", "observe", "attributes", "toggle", "moduleName", "defaults", "Object", "freeze", "chooseFilesButton", "dropInstruction", "noFileChosen", "multipleFilesChosen", "one", "other", "enteredDropZone", "leftDropZone", "schema", "properties", "hasNoTypesInfo", "types", "isDraggingFiles", "some", "Header", "Component", "constructor", "$root", "$menuButton", "$menu", "menuIsOpen", "mql", "querySelector", "classList", "add", "menuId", "getAttribute", "ElementError", "component", "identifier", "document", "getElementById", "element", "setupResponsiveChecks", "addEventListener", "handleMenuButtonClick", "breakpoint", "getBreakpoint", "value", "property", "window", "matchMedia", "checkMode", "addListener", "matches", "removeAttribute", "setAttribute", "toString", "moduleName", "NotificationBanner", "ConfigurableComponent", "constructor", "$root", "config", "getAttribute", "disableAutoFocus", "setFocus", "moduleName", "defaults", "Object", "freeze", "schema", "properties", "type", "PasswordInput", "ConfigurableComponent", "constructor", "$root", "config", "i18n", "$input", "$showHideButton", "$screenReaderStatusMessage", "querySelector", "HTMLInputElement", "ElementError", "component", "element", "expectedType", "identifier", "type", "HTMLButtonElement", "I18n", "locale", "closestAttributeValue", "removeAttribute", "document", "createElement", "className", "setAttribute", "insertAdjacentElement", "addEventListener", "toggle", "bind", "form", "hide", "window", "event", "persisted", "preventDefault", "show", "setType", "isHidden", "prefixButton", "prefixStatus", "innerText", "t", "moduleName", "defaults", "Object", "freeze", "showPassword", "hidePassword", "showPasswordAriaLabel", "hidePasswordAriaLabel", "passwordShownAnnouncement", "passwordHiddenAnnouncement", "schema", "properties", "Radios", "Component", "constructor", "$root", "$inputs", "querySelectorAll", "length", "ElementError", "component", "identifier", "forEach", "$input", "targetId", "getAttribute", "document", "getElementById", "setAttribute", "removeAttribute", "window", "addEventListener", "syncAllConditionalReveals", "event", "handleClick", "syncConditionalRevealWithInputState", "$target", "classList", "contains", "inputIsChecked", "checked", "toString", "toggle", "$clickedInput", "target", "HTMLInputElement", "type", "$allInputs", "$clickedInputForm", "form", "$clickedInputName", "name", "hasSameFormOwner", "hasSameName", "moduleName", "ServiceNavigation", "Component", "constructor", "$root", "$menuButton", "$menu", "menuIsOpen", "mql", "querySelector", "menuId", "getAttribute", "ElementError", "component", "identifier", "document", "getElementById", "element", "setupResponsiveChecks", "addEventListener", "handleMenuButtonClick", "breakpoint", "getBreakpoint", "value", "property", "window", "matchMedia", "checkMode", "addListener", "matches", "removeAttribute", "setAttribute", "toString", "moduleName", "SkipLink", "Component", "constructor", "$root", "_this$$root$getAttrib", "hash", "href", "getAttribute", "url", "window", "URL", "error", "ElementError", "origin", "location", "pathname", "linkedElementId", "getFragmentFromUrl", "$linkedElement", "document", "getElementById", "component", "element", "identifier", "addEventListener", "setFocus", "onBeforeFocus", "classList", "add", "onBlur", "remove", "elementType", "HTMLAnchorElement", "moduleName", "Tabs", "Component", "constructor", "$root", "$tabs", "$tabList", "$tabListItems", "jsHiddenClass", "changingHash", "boundTabClick", "boundTabKeydown", "boundOnHashChange", "mql", "querySelectorAll", "length", "ElementError", "component", "identifier", "onTabClick", "bind", "onTabKeydown", "onHashChange", "querySelector", "setupResponsiveChecks", "breakpoint", "getBreakpoint", "value", "property", "window", "matchMedia", "addEventListener", "checkMode", "addListener", "_this$mql", "matches", "setup", "teardown", "_this$getTab", "setAttribute", "forEach", "$item", "$tab", "setAttributes", "hideTab", "$activeTab", "getTab", "location", "hash", "showTab", "removeAttribute", "removeEventListener", "unsetAttributes", "$tabWithHash", "$previousTab", "getCurrentTab", "focus", "unhighlightTab", "hidePanel", "highlightTab", "showPanel", "panelId", "getFragmentFromUrl", "href", "$panel", "getPanel", "id", "classList", "add", "remove", "event", "$currentTab", "$nextTab", "currentTarget", "HTMLAnchorElement", "preventDefault", "createHistoryEntry", "key", "activatePreviousTab", "activateNextTab", "parentElement", "$nextTabListItem", "nextElementSibling", "$previousTabListItem", "previousElementSibling", "moduleName", "initAll", "config", "_config$scope", "isSupported", "onError", "SupportError", "console", "log", "components", "Accordion", "accordion", "Button", "button", "CharacterCount", "characterCount", "Checkboxes", "ErrorSummary", "errorSummary", "ExitThisPage", "exitThisPage", "FileUpload", "fileUpload", "Header", "NotificationBanner", "notificationBanner", "PasswordInput", "passwordInput", "Radios", "ServiceNavigation", "SkipLink", "Tabs", "options", "scope", "document", "forEach", "Component", "createAll", "createAllOptions", "$scope", "_createAllOptions$sco", "HTMLElement", "$elements", "querySelectorAll", "moduleName", "component", "Array", "from", "map", "$element", "error", "element", "filter", "Boolean", "moj"]
}
